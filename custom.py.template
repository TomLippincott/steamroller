# These are general values that can be overridden by specific
# tasks or models.  For example, you might have a task with a
# smaller data set where `sizes` ranges too high, so you could
# override it in that task definition.
DEFAULTS = {
    # What data sizes (number of documents) to run experiments with.
    # This will run experiments with randomly-sampled subsets of
    # data in size 100, 200, 300...2000
    #"sizes" : range(1000, 2100, 100),
    "sizes" : [1000, 2000, 4000, 8000, 16000, 32000, 64000],

    # How many random data folds for each experiment (combination
    # of size and task).  The different models are run on the same
    # folds, i.e. "task X, fold Y" is the same for models A and B.
    "folds" : 10,

    # What proportion of the data is passed to the training script.
    # The remainder is used for testing.  Note that it is up to
    # the training script to split out e.g. a development set.
    "train_proportion" : 0.9,
    
    # This is a parameter used by the Naive Bayes model (see below).
    "max_ngram" : 4,
}

# A "task" is just a labeled data set.
TASKS = [
    #{"name" : "EnglishSpanishLID",
    # "file" : "tasks/english_spanish_lid.txt.gz",     
    #},    
    {"name" : "LID",
     "file" : "tasks/lid.txt.gz",     
    },    
    {"name" : "Politics",
     "file" : "tasks/politics.txt.gz",     
    },    
    {"name" : "Gender",
     "file" : "tasks/gender.txt.gz",     
    },    
    {"name" : "Events",
     "file" : "tasks/events.txt.gz",     
    },    
]

# A "model" provides two commands: one for training, the other for
# applying.  The entries here specify how these commands are actually
# invoked, with a few placeholders ("${SOURCES[X]}", "${TARGETS[X]}")
# for the input provided by the build system.  The commands can have
# additional placeholders, like "%(max_ngram)s", which then must be
# defined under DEFAULTS (note the additional placeholders use Python
# string substitution syntax).
MODELS = [
    
    # {"name" : "NaiveBayes",
    #  # ${SOURCES[0]} and ${SOURCES[1]}, are the training indices and
    #  # input file, respectively, and ${TARGETS[0]} is the file where
    #  # the model will be written.
    #  "train_command" : "python models/naive_bayes_wrapper.py --train ${SOURCES[0]} --input ${SOURCES[1]} --output ${TARGETS[0]} --max_ngram %(max_ngram)s",
    #  # ${SOURCES[0]}, ${SOURCES[1]} and ${SOURCES[2]} are the model file,
    #  # and input file, respectively, and ${TARGETS[0]} is the file to
    #  # write the prediction probabilities to.
    #  "apply_command" : "python models/naive_bayes_wrapper.py --model ${SOURCES[0]} --test ${SOURCES[1]} --input ${SOURCES[2]} --output ${TARGETS[0]}",
    # },

    {"name" : "SVM",
     "train_command" : "python models/svm_wrapper.py --train ${SOURCES[0]} --input ${SOURCES[1]} --output ${TARGETS[0]} --max_ngram %(max_ngram)s",
     "apply_command" : "python models/svm_wrapper.py --model ${SOURCES[0]} --test ${SOURCES[1]} --input ${SOURCES[2]} --output ${TARGETS[0]}",
    },
    
    {"name" : "VaLID",
     "train_command" : "python models/valid_wrapper.py --train ${SOURCES[0]} --input ${SOURCES[1]} --output ${TARGETS[0]} --max_ngram %(max_ngram)s",
     "apply_command" : "python models/valid_wrapper.py --model ${SOURCES[0]} --test ${SOURCES[1]} --input ${SOURCES[2]} --output ${TARGETS[0]}",
    },

    # {"name" : "LogisticRegression",
    #  "train_command" : "python models/logistic_regression_wrapper.py --train ${SOURCES[0]} --input ${SOURCES[1]} --output ${TARGETS[0]} --max_ngram %(max_ngram)s",
    #  "apply_command" : "python models/logistic_regression_wrapper.py --model ${SOURCES[0]} --test ${SOURCES[1]} --input ${SOURCES[2]} --output ${TARGETS[0]}",
    # },

    {"name" : "FastText",
     "train_command" : "python models/fasttext_wrapper.py --train ${SOURCES[0]} --input ${SOURCES[1]} --output ${TARGETS[0]} --word_vector_size 5 --max_char_ngram %(max_ngram)s --max_word_ngram 2 --word_context_size 2",
     "apply_command" : "python models/fasttext_wrapper.py --model ${SOURCES[0]} --test ${SOURCES[1]} --input ${SOURCES[2]} --output ${TARGETS[0]}",
    },

    #{"name" : "Seal",
    # "train_command" : "python models/seal_wrapper.py --train ${SOURCES[0]} --input ${SOURCES[1]} --output ${TARGETS[0]}",
    # "apply_command" : "python models/seal_wrapper.py --model ${SOURCES[0]} --test ${SOURCES[1]} --input ${SOURCES[2]} --output ${TARGETS[0]}",
    #},

]

GRID = True
